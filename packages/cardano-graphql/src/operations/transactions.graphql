fragment metadatumValue on Metadatum {
  __typename
  ... on BytesMetadatum {
    bytes
  }
  ... on IntegerMetadatum {
    int
  }
  ... on StringMetadatum {
    string
  }
}

fragment metadatumMap on MetadatumMap {
  map {
    label
    metadatum {
      ...metadatumValue
      ... on MetadatumArray {
        ...metadatumArray
      }
      # Review: nested maps and arrays are currently supported up to 1 level of nesting,
      # because it's recursive. If needed we can add support for more levels in this fragment,
      # or we could try to use https://dgraph.io/docs/query-language/recurse-query/
      # Same with array of arrays and array of maps
      ... on MetadatumMap {
        __typename
        map {
          label
          metadatum {
            ...metadatumValue
            ... on MetadatumArray {
              ...metadatumArray
            }
          }
        }
      }
    }
  }
}

fragment metadatumArray on MetadatumArray {
  array {
    ...metadatumValue
    ... on MetadatumArray {
      array {
        ...metadatumValue
      }
    }
    ... on MetadatumMap {
      map {
        label
        metadatum {
          ...metadatumValue
        }
      }
    }
  }
}

fragment protocolParameters on ProtocolParametersAlonzo {
  stakeKeyDeposit
  poolDeposit
}

fragment txIn on TransactionInput {
  index
  address {
    address
  }
}

fragment nonRecursiveNativeScriptFields on NativeScript {
  __typename
  startsAt {
    number
  }
  expiresAt {
    number
  }
  vkey {
    key
  }
}
fragment anyScript on Script {
  ... on NativeScript {
    ...nonRecursiveNativeScriptFields
    # Current implmentation does not support nested arrays
    any {
      ...nonRecursiveNativeScriptFields
    }
    all {
      ...nonRecursiveNativeScriptFields
    }
    nof {
      key
      scripts {
        ...nonRecursiveNativeScriptFields
      }
    }
  }
  ... on PlutusScript {
    __typename
    cborHex
  }
}

fragment coreTransactionFields on Transaction {
  inputs {
    ...txIn
  }
  outputs {
    address {
      address
    }
    value {
      coin
      assets {
        asset {
          assetId
        }
        quantity
      }
    }
    datumHash
  }
  certificates {
    __typename
    ... on GenesisKeyDelegationCertificate {
      genesisHash
      genesisDelegateHash
      vrfKeyHash
    }
    ... on MirCertificate {
      rewardAccount {
        address
      }
      quantity
      pot
    }
    ... on PoolRegistrationCertificate {
      epoch {
        number
      }
      poolParameters {
        ...allPoolParameterFields
        stakePool {
          id
        }
      }
    }
    ... on PoolRetirementCertificate {
      epoch {
        number
      }
      stakePool {
        id
      }
    }
    ... on StakeDelegationCertificate {
      rewardAccount {
        address
      }
      stakePool {
        id
      }
      epoch {
        number
      }
    }
    ... on StakeKeyRegistrationCertificate {
      rewardAccount {
        address
      }
    }
    ... on StakeKeyDeregistrationCertificate {
      rewardAccount {
        address
      }
    }
  }
  collateral {
    ...txIn
  }
  fee
  invalidBefore {
    slotNo: number
  }
  invalidHereafter {
    slotNo: number
  }
  withdrawals {
    rewardAccount {
      address
    }
    quantity
  }
  mint {
    asset {
      assetId
    }
    quantity
  }
  hash
  index
  size
  block {
    blockNo
    slot {
      number
    }
    hash
  }
  requiredExtraSignatures {
    hash
  }
  scriptIntegrityHash
  witness {
    signatures {
      publicKey {
        key
      }
      signature
    }
    scripts {
      key
      script {
        ...anyScript
      }
    }
    bootstrap {
      signature
      chainCode
      addressAttributes
      key {
        key
      }
    }
    redeemers {
      index
      purpose
      scriptHash
      executionUnits {
        memory
        steps
      }
    }
    datums {
      hash
      datum
    }
  }
  auxiliaryData {
    hash
    body {
      scripts {
        script {
          ...anyScript
        }
      }
      blob {
        label
        metadatum {
          ...metadatumValue
          ... on MetadatumArray {
            ...metadatumArray
          }
          ... on MetadatumMap {
            ...metadatumMap
          }
        }
      }
    }
  }
}

query TransactionsByHashes($hashes: [String!]!) {
  queryProtocolParametersAlonzo {
    ...protocolParameters
  }
  queryTransaction(filter: { hash: { in: $hashes } }) {
    ...coreTransactionFields
  }
}

query TransactionsByAddresses($addresses: [String!]!) {
  queryProtocolParametersAlonzo {
    ...protocolParameters
  }
  queryAddress(filter: { address: { in: $addresses } }) {
    # TODO: find if this query could filter duplicate transactions
    inputs {
      transaction {
        ...coreTransactionFields
      }
    }
    utxo {
      transaction {
        ...coreTransactionFields
      }
    }
  }
}
